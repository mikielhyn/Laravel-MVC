@extends('layouts.master')
@section('title','Home')
@section('content')

<div class="container">
	<div class="row">
		<div class="col-md-12">
			<h1 class="container">MVC Pattern</h1>
			<div class="container">
				<p>The Model-View-Control (MVC) pattern, originally formulated in the late 1970s, is a software architecture pattern built on the basis of keeping the presentation of data separate from the methods that interact with the data. In theory, a well-developed MVC system should allow a front-end developer and a back-end developer to work on the same system without interfering, sharing, or editing files either party is working on.</p>
<p>Even though MVC was originally designed for personal computing, it has been adapted and is widely used by web developers due to its emphasis on separation of concerns, and thus indirectly, reusable code. The pattern encourages the development of modular systems, allowing developers to quickly update, add, or even remove functionality.</p>
<p>In this article, I will go the basic principles of MVC, a run through the definition of the pattern and a quick example of MVC in PHP. This is definitely a read for anyone who has never coding with MVC before or those wanting to brush up on previous MVC development skills.</p>
<h2>Understanding MVC</h2>
<p>The pattern’s title is a collation of its three core parts: Model, View, and Controller. A visual representation of a complete and correct MVC pattern looks <a href="http://en.wikipedia.org/wiki/File:MVC-Process.png" title="MVC-Process" target="_blank">like the following diagram</a>: </p>
<p><img src="https://uploads.sitepoint.com/wp-content/uploads/2013/03/MVC-Process.png" alt="MVC Process" width="320" height="350" class="aligncenter size-full wp-image-5260" style="float:none; margin-left:auto; margin-right:auto;" loading="lazy"></p>
<p>The image shows the single flow layout of data, how it’s passed between each component, and finally how the relationship between each component works.</p>
<h3>Model</h3>
<p>The Model is the name given to the permanent storage of the data used in the overall design. It must allow access for the data to be viewed, or collected and written to, and is the bridge between the View component and the Controller component in the overall pattern.</p>
<p>One important aspect of the Model is that it’s technically “blind” – by this I mean the model has no connection or knowledge of what happens to the data when it is passed to the View or Controller components. It neither calls nor seeks a response from the other parts; its sole purpose is to process data into its permanent storage or seek and prepare data to be passed along to the other parts.</p>
<p>The Model, however, cannot simply be summed up as a database, or a gateway to another system which handles the data process. The Model must act as a gatekeeper to the data itself, asking no questions but accepting all requests which comes its way. Often the most complex part of the MVC system, the Model component is also the pinnacle of the whole system since without it there isn’t a connection between the Controller and the View.</p>
<h3>View</h3>
<p>The View is where data, requested from the Model, is viewed and its final output is determined. Traditionally in web apps built using MVC, the View is the part of the system where the HTML is generated and displayed. The View also ignites reactions from the user, who then goes on to interact with the Controller. The basic example of this is a button generated by a View, which a user clicks and triggers an action in the Controller. </p>
<p>There are some misconceptions held about View components, particularly by web developers using the MVC pattern to build their application. For example, many mistake the View as having no connection whatsoever to the Model and that all of the data displayed by the View is passed from the Controller. In reality, this flow disregards the theory behind the MVC pattern completely. Fabio Cevasco’s article <a href="https://www.sitepoint.com/application-development-cakephp/" title="The CakePHP Framework: Your First Bite">The CakePHP Framework: Your First Bite</a> demonstrates this confused approach to MVC in the CakePHP framework, an example of the many non-traditional MVC PHP frameworks available:</p>
<blockquote><p>“It is important to note that in order to correctly apply the MVC architecture, there must be no interaction between models and views: all the logic is handled by controllers“</p></blockquote>
<p>Furthermore, the description of Views as a template file is inaccurate. However, as Tom Butler points out, this is not one person’s fault but a multitude of errors by a multitude of developers which result in developers learning MVC incorrectly. They then go on to educate others incorrectly. The View is really much more than just a template, however modern MVC inspired frameworks have bastardised the view almost to the point that no one really cares whether or not a framework actually adheres to the correct MVC pattern or not.</p>
<p>It’s also important to remember that the View part is never given data by the Controller. As I mentioned when discussing the Model, there is no direct relationship between the View and the Controller without the Model in between them.</p><div class="proper-ad-unit">
          <div id="proper-ad-sitepoint_content_1">
            <script>
              if ( !!window.propertag ) {
                window.propertag.cmd.push(function() {
                  proper_display('sitepoint_content_1');
                });
              }
            </script></div>
        </div><p></p>
<h3>Controller</h3>
<p>The final component of the triad is the Controller. Its job is to handle data that the user inputs or submits, and update the Model accordingly. The Controller’s life blood is the user; without user interactions, the Controller has no purpose. It is the only part of the pattern the user should be interacting with. </p>
<p>The Controller can be summed up simply as a collector of information, which then passes it on to the Model to be organized for storage, and does not contain any logic other than that needed to collect the input. The Controller is also only connected to a single View and to a single Model, making it a one way data flow system, with handshakes and signoffs at each point of data exchange.</p>
<p>It’s important to remember the Controller is only given tasks to perform when the user interacts with the View first, and that each Controller function is a trigger, set off by the user’s interaction with the View. The most common mistake made by developers is confusing the Controller for a gateway, and ultimately assigning it functions and responsibilities that the View should have (this is normally a result of the same developer confusing the View component simply as a template). Additionally, it’s a common mistake to give the Controller functions that give it the sole responsibility of crunching, passing, and processing data from the Model to the View, whereas in the MVC pattern this relationship should be kept between the Model and the View.</p>
<h2>MVC in PHP</h2>
<p>It is possible to write a web application in PHP whose architecture is based on the MVC pattern. Let’s start with a bare bones example:</p>
	<pre tabindex="0" class=" language-none"><code class="language- language-none">&lt;?php
	class Model
	{
		public $string;

		public function __construct(){
		$this-&gt;string = "MVC + PHP = Awesome!";
	}
}</code></pre>
<pre tabindex="0" class=" language-none"><code class="language- language-none">&lt;?php
class View
{
    private $model;
    private $controller;

    public function __construct($controller,$model) {
        $this-&gt;controller = $controller;
        $this-&gt;model = $model;
    }
	
    public function output(){
        return "&lt;p&gt;" . $this-&gt;model-&gt;string . "&lt;/p&gt;";
    }
}</code></pre>
<pre tabindex="0" class=" language-none"><code class="language- language-none">&lt;?php
class Controller
{
    private $model;

    public function __construct($model) {
        $this-&gt;model = $model;
    }
}</code></pre>
<p>We have our project started with some very basic classes for each part of the pattern. Now we need to set up the relationships between them:</p>
<pre tabindex="0" class=" language-none"><code class="language- language-none">&lt;?php
$model = new Model();
$controller = new Controller($model);
$view = new View($controller, $model);
echo $view-&gt;output();</code></pre>
<p>As you can see in the example above, we don’t have any Controller-specific functionality because we don’t have any user interactions defined with our application. The View holds all of the functionality as the example is purely for display purposes.</p>
<p>Let’s now expand the example to show how we would add functionality to the controller, thereby adding interactivity to the application:</p>
<pre tabindex="0" class=" language-none"><code class="language- language-none">&lt;?php
class Model
{
    public $string;

    public function __construct(){
        $this-&gt;string = “MVC + PHP = Awesome, click here!”;
    }

}</code></pre>
<pre tabindex="0" class=" language-none"><code class="language- language-none">&lt;?php
class View
{
    private $model;
    private $controller;

    public function __construct($controller,$model) {
        $this-&gt;controller = $controller;
        $this-&gt;model = $model;
    }

    public function output() {
        return '&lt;p&gt;&lt;a href="mvc.php?action=clicked"' . $this-&gt;model-&gt;string . "&lt;/a&gt;&lt;/p&gt;";
    }
}</code></pre>
<pre tabindex="0" class=" language-none"><code class="language- language-none">&lt;?php
class Controller
{
    private $model;

    public function __construct($model){
        $this-&gt;model = $model;
    }

    public function clicked() {
        $this-&gt;model-&gt;string = “Updated Data, thanks to MVC and PHP!”
    }
}</code></pre>
<p>We’ve enhanced the application with some basic functionality. Setting up the relationship between our components now looks like this:</p>
<pre tabindex="0" class=" language-none"><code class="language- language-none">&lt;?php
$model = new Model();
$controller = new Controller($model);
$view = new View($controller, $model);

if (isset($_GET['action']) &amp;&amp; !empty($_GET['action'])) {
    $controller-&gt;{$_GET['action']}();
}

echo $view-&gt;output();</code></pre>
<p>Run the code and when you click on the link you’ll be able to see the string change its data.</p>
<h2>Conclusion</h2>
<p>We’ve covered the basic theory behind the MVC pattern and have produced a very basic MVC application, but we still have a long way to go before we get into any nitty-gritty functionality.</p>
			</div>
		</div>
	</div>
</div>

@endsection